From 4f563914a74cfa40a0c71d560a87845ccbc85c8b Mon Sep 17 00:00:00 2001
From: LinsaFTW <25271111+linsaftw@users.noreply.github.com>
Date: Sun, 13 Mar 2022 20:44:24 -0300
Subject: [PATCH] mc-dev imports


diff --git a/src/main/java/net/minecraft/server/IChatBaseComponent.java b/src/main/java/net/minecraft/server/IChatBaseComponent.java
new file mode 100644
index 000000000..463cfe49f
--- /dev/null
+++ b/src/main/java/net/minecraft/server/IChatBaseComponent.java
@@ -0,0 +1,246 @@
+package net.minecraft.server;
+
+import com.google.gson.Gson;
+import com.google.gson.GsonBuilder;
+import com.google.gson.JsonArray;
+import com.google.gson.JsonDeserializationContext;
+import com.google.gson.JsonDeserializer;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParseException;
+import com.google.gson.JsonPrimitive;
+import com.google.gson.JsonSerializationContext;
+import com.google.gson.JsonSerializer;
+import java.lang.reflect.Type;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map.Entry;
+
+public interface IChatBaseComponent extends Iterable<IChatBaseComponent> {
+
+    IChatBaseComponent setChatModifier(ChatModifier chatmodifier);
+
+    ChatModifier getChatModifier();
+
+    IChatBaseComponent a(String s);
+
+    IChatBaseComponent addSibling(IChatBaseComponent ichatbasecomponent);
+
+    String getText();
+
+    String c();
+
+    List<IChatBaseComponent> a();
+
+    IChatBaseComponent f();
+
+    public static class ChatSerializer implements JsonDeserializer<IChatBaseComponent>, JsonSerializer<IChatBaseComponent> {
+
+        private static final Gson a;
+
+        public ChatSerializer() {}
+
+        public IChatBaseComponent a(String lastElement, JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+            if (jsonelement.isJsonPrimitive()) {
+                return new ChatComponentText(jsonelement.getAsString());
+            } else if (!jsonelement.isJsonObject()) {
+                if (jsonelement.isJsonArray()) {
+                    JsonArray jsonarray = jsonelement.getAsJsonArray();
+                    IChatBaseComponent ichatbasecomponent = null;
+                    Iterator iterator = jsonarray.iterator();
+
+                    while (iterator.hasNext()) {
+                        JsonElement jsonelement1 = (JsonElement) iterator.next();
+                        IChatBaseComponent ichatbasecomponent1 = this.a(jsonelement1, (Type) jsonelement1.getClass(), jsondeserializationcontext);
+
+                        if (ichatbasecomponent == null) {
+                            ichatbasecomponent = ichatbasecomponent1;
+                        } else {
+                            ichatbasecomponent.addSibling(ichatbasecomponent1);
+                        }
+                    }
+
+                    return ichatbasecomponent;
+                } else {
+                    throw new JsonParseException("Don\'t know how to turn " + jsonelement.toString() + " into a Component");
+                }
+            } else {
+                JsonObject jsonobject = jsonelement.getAsJsonObject();
+                Object object;
+
+                if (jsonobject.has("text")) {
+                    object = new ChatComponentText(jsonobject.get("text").getAsString());
+                } else if (jsonobject.has("translate")) {
+                    String s = jsonobject.get("translate").getAsString();
+
+                    if (jsonobject.has("with")) {
+                        JsonArray jsonarray1 = jsonobject.getAsJsonArray("with");
+                        Object[] aobject = new Object[jsonarray1.size()];
+
+                        for (int i = 0; i < aobject.length; ++i) {
+                            aobject[i] = this.a("with", jsonarray1.get(i), type, jsondeserializationcontext);
+                            if (aobject[i] instanceof ChatComponentText) {
+                                ChatComponentText chatcomponenttext = (ChatComponentText) aobject[i];
+
+                                if (chatcomponenttext.getChatModifier().g() && chatcomponenttext.a().isEmpty()) {
+                                    aobject[i] = chatcomponenttext.g();
+                                }
+                            }
+                        }
+
+                        object = new ChatMessage(s, aobject);
+                    } else {
+                        object = new ChatMessage(s, new Object[0]);
+                    }
+                } else if (jsonobject.has("score")) {
+                    JsonObject jsonobject1 = jsonobject.getAsJsonObject("score");
+
+                    if (!jsonobject1.has("name") || !jsonobject1.has("objective")) {
+                        throw new JsonParseException("A score component needs a least a name and an objective");
+                    }
+
+                    object = new ChatComponentScore(ChatDeserializer.h(jsonobject1, "name"), ChatDeserializer.h(jsonobject1, "objective"));
+                    if (jsonobject1.has("value")) {
+                        ((ChatComponentScore) object).b(ChatDeserializer.h(jsonobject1, "value"));
+                    }
+                } else {
+                    if (!jsonobject.has("selector")) {
+                        throw new JsonParseException("Don\'t know how to turn " + jsonelement.toString() + " into a Component");
+                    }
+
+                    object = new ChatComponentSelector(ChatDeserializer.h(jsonobject, "selector"));
+                }
+
+                if (jsonobject.has("extra")) {
+                    JsonArray jsonarray2 = jsonobject.getAsJsonArray("extra");
+
+                    if (jsonarray2.size() <= 0) {
+                        throw new JsonParseException("Unexpected empty array of components");
+                    }
+
+                    for (int j = 0; j < jsonarray2.size(); ++j) {
+                        ((IChatBaseComponent) object).addSibling(this.a("extra", jsonarray2.get(j), type, jsondeserializationcontext));
+                    }
+                }
+
+                ((IChatBaseComponent) object).setChatModifier((ChatModifier) jsondeserializationcontext.deserialize(jsonelement, ChatModifier.class));
+                return (IChatBaseComponent) object;
+            }
+        }
+
+        public IChatBaseComponent a(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+            return a(null, jsonelement, type, jsondeserializationcontext);
+        }
+
+        private void a(ChatModifier chatmodifier, JsonObject jsonobject, JsonSerializationContext jsonserializationcontext) {
+            JsonElement jsonelement = jsonserializationcontext.serialize(chatmodifier);
+
+            if (jsonelement.isJsonObject()) {
+                JsonObject jsonobject1 = (JsonObject) jsonelement;
+                Iterator iterator = jsonobject1.entrySet().iterator();
+
+                while (iterator.hasNext()) {
+                    Entry entry = (Entry) iterator.next();
+
+                    jsonobject.add((String) entry.getKey(), (JsonElement) entry.getValue());
+                }
+            }
+
+        }
+
+        public JsonElement a(IChatBaseComponent ichatbasecomponent, Type type, JsonSerializationContext jsonserializationcontext) {
+            if (ichatbasecomponent instanceof ChatComponentText && ichatbasecomponent.getChatModifier().g() && ichatbasecomponent.a().isEmpty()) {
+                return new JsonPrimitive(((ChatComponentText) ichatbasecomponent).g());
+            } else {
+                JsonObject jsonobject = new JsonObject();
+
+                if (!ichatbasecomponent.getChatModifier().g()) {
+                    this.a(ichatbasecomponent.getChatModifier(), jsonobject, jsonserializationcontext);
+                }
+
+                if (!ichatbasecomponent.a().isEmpty()) {
+                    JsonArray jsonarray = new JsonArray();
+                    Iterator iterator = ichatbasecomponent.a().iterator();
+
+                    while (iterator.hasNext()) {
+                        IChatBaseComponent ichatbasecomponent1 = (IChatBaseComponent) iterator.next();
+
+                        jsonarray.add(this.a(ichatbasecomponent1, (Type) ichatbasecomponent1.getClass(), jsonserializationcontext));
+                    }
+
+                    jsonobject.add("extra", jsonarray);
+                }
+
+                if (ichatbasecomponent instanceof ChatComponentText) {
+                    jsonobject.addProperty("text", ((ChatComponentText) ichatbasecomponent).g());
+                } else if (ichatbasecomponent instanceof ChatMessage) {
+                    ChatMessage chatmessage = (ChatMessage) ichatbasecomponent;
+
+                    jsonobject.addProperty("translate", chatmessage.i());
+                    if (chatmessage.j() != null && chatmessage.j().length > 0) {
+                        JsonArray jsonarray1 = new JsonArray();
+                        Object[] aobject = chatmessage.j();
+                        int i = aobject.length;
+
+                        for (int j = 0; j < i; ++j) {
+                            Object object = aobject[j];
+
+                            if (object instanceof IChatBaseComponent) {
+                                jsonarray1.add(this.a((IChatBaseComponent) object, (Type) object.getClass(), jsonserializationcontext));
+                            } else {
+                                jsonarray1.add(new JsonPrimitive(String.valueOf(object)));
+                            }
+                        }
+
+                        jsonobject.add("with", jsonarray1);
+                    }
+                } else if (ichatbasecomponent instanceof ChatComponentScore) {
+                    ChatComponentScore chatcomponentscore = (ChatComponentScore) ichatbasecomponent;
+                    JsonObject jsonobject1 = new JsonObject();
+
+                    jsonobject1.addProperty("name", chatcomponentscore.g());
+                    jsonobject1.addProperty("objective", chatcomponentscore.h());
+                    jsonobject1.addProperty("value", chatcomponentscore.getText());
+                    jsonobject.add("score", jsonobject1);
+                } else {
+                    if (!(ichatbasecomponent instanceof ChatComponentSelector)) {
+                        throw new IllegalArgumentException("Don\'t know how to serialize " + ichatbasecomponent + " as a Component");
+                    }
+
+                    ChatComponentSelector chatcomponentselector = (ChatComponentSelector) ichatbasecomponent;
+
+                    jsonobject.addProperty("selector", chatcomponentselector.g());
+                }
+
+                return jsonobject;
+            }
+        }
+
+        public static String a(IChatBaseComponent ichatbasecomponent) {
+            return IChatBaseComponent.ChatSerializer.a.toJson(ichatbasecomponent);
+        }
+
+        public static IChatBaseComponent a(String s) {
+            return (IChatBaseComponent) IChatBaseComponent.ChatSerializer.a.fromJson(s, IChatBaseComponent.class);
+        }
+
+        @Override
+        public JsonElement serialize(IChatBaseComponent object, Type type, JsonSerializationContext jsonserializationcontext) {
+            return this.a((IChatBaseComponent) object, type, jsonserializationcontext);
+        }
+
+        @Override
+        public IChatBaseComponent deserialize(JsonElement jsonelement, Type type, JsonDeserializationContext jsondeserializationcontext) throws JsonParseException {
+            return this.a(jsonelement, type, jsondeserializationcontext);
+        }
+
+        static {
+            GsonBuilder gsonbuilder = new GsonBuilder();
+
+            gsonbuilder.registerTypeHierarchyAdapter(IChatBaseComponent.class, new IChatBaseComponent.ChatSerializer());
+            gsonbuilder.registerTypeHierarchyAdapter(ChatModifier.class, new ChatModifier.ChatModifierSerializer());
+            gsonbuilder.registerTypeAdapterFactory(new ChatTypeAdapterFactory());
+            a = gsonbuilder.create();
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/command/defaults/VersionCommand.java b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
new file mode 100644
index 000000000..bd3138c00
--- /dev/null
+++ b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
@@ -0,0 +1,255 @@
+package org.bukkit.command.defaults;
+
+import com.google.common.base.Charsets;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import org.apache.commons.lang.Validate;
+import org.bukkit.Bukkit;
+import org.bukkit.ChatColor;
+import org.bukkit.command.CommandSender;
+import org.bukkit.plugin.Plugin;
+import org.bukkit.plugin.PluginDescriptionFile;
+import org.bukkit.util.StringUtil;
+
+import com.google.common.collect.ImmutableList;
+import com.google.common.io.Resources;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.util.HashSet;
+import java.util.Set;
+import java.util.concurrent.locks.ReentrantLock;
+import java.util.logging.Level;
+import java.util.logging.Logger;
+import org.json.simple.JSONObject;
+import org.json.simple.parser.JSONParser;
+import org.json.simple.parser.ParseException;
+
+public class VersionCommand extends BukkitCommand {
+    public VersionCommand(String name) {
+        super(name);
+
+        this.description = "Gets the version of this server including any plugins in use";
+        this.usageMessage = "/version [plugin name]";
+        this.setPermission("bukkit.command.version");
+        this.setAliases(Arrays.asList("ver", "about"));
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String currentAlias, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length == 0) {
+            sender.sendMessage("This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ")");
+            sendVersion(sender);
+        } else {
+            StringBuilder name = new StringBuilder();
+
+            for (String arg : args) {
+                if (name.length() > 0) {
+                    name.append(' ');
+                }
+
+                name.append(arg);
+            }
+
+            String pluginName = name.toString();
+            Plugin exactPlugin = Bukkit.getPluginManager().getPlugin(pluginName);
+            if (exactPlugin != null) {
+                describeToSender(exactPlugin, sender);
+                return true;
+            }
+
+            boolean found = false;
+            pluginName = pluginName.toLowerCase();
+            for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
+                if (plugin.getName().toLowerCase().contains(pluginName)) {
+                    describeToSender(plugin, sender);
+                    found = true;
+                }
+            }
+
+            if (!found) {
+                sender.sendMessage("This server is not running any plugin by that name.");
+                sender.sendMessage("Use /plugins to get a list of plugins.");
+            }
+        }
+        return true;
+    }
+
+    private void describeToSender(Plugin plugin, CommandSender sender) {
+        PluginDescriptionFile desc = plugin.getDescription();
+        sender.sendMessage(ChatColor.GREEN + desc.getName() + ChatColor.WHITE + " version " + ChatColor.GREEN + desc.getVersion());
+
+        if (desc.getDescription() != null) {
+            sender.sendMessage(desc.getDescription());
+        }
+
+        if (desc.getWebsite() != null) {
+            sender.sendMessage("Website: " + ChatColor.GREEN + desc.getWebsite());
+        }
+
+        if (!desc.getAuthors().isEmpty()) {
+            if (desc.getAuthors().size() == 1) {
+                sender.sendMessage("Author: " + getAuthors(desc));
+            } else {
+                sender.sendMessage("Authors: " + getAuthors(desc));
+            }
+        }
+    }
+
+    private String getAuthors(final PluginDescriptionFile desc) {
+        StringBuilder result = new StringBuilder();
+        List<String> authors = desc.getAuthors();
+
+        for (int i = 0; i < authors.size(); i++) {
+            if (result.length() > 0) {
+                result.append(ChatColor.WHITE);
+
+                if (i < authors.size() - 1) {
+                    result.append(", ");
+                } else {
+                    result.append(" and ");
+                }
+            }
+
+            result.append(ChatColor.GREEN);
+            result.append(authors.get(i));
+        }
+
+        return result.toString();
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args) {
+        Validate.notNull(sender, "Sender cannot be null");
+        Validate.notNull(args, "Arguments cannot be null");
+        Validate.notNull(alias, "Alias cannot be null");
+
+        if (args.length == 1) {
+            List<String> completions = new ArrayList<String>();
+            String toComplete = args[0].toLowerCase();
+            for (Plugin plugin : Bukkit.getPluginManager().getPlugins()) {
+                if (StringUtil.startsWithIgnoreCase(plugin.getName(), toComplete)) {
+                    completions.add(plugin.getName());
+                }
+            }
+            return completions;
+        }
+        return ImmutableList.of();
+    }
+
+    private final ReentrantLock versionLock = new ReentrantLock();
+    private boolean hasVersion = false;
+    private String versionMessage = null;
+    private final Set<CommandSender> versionWaiters = new HashSet<CommandSender>();
+    private boolean versionTaskStarted = false;
+    private long lastCheck = 0;
+
+    private void sendVersion(CommandSender sender) {
+        if (hasVersion) {
+            if (System.currentTimeMillis() - lastCheck > 21600000) {
+                lastCheck = System.currentTimeMillis();
+                hasVersion = false;
+            } else {
+                sender.sendMessage(versionMessage);
+                return;
+            }
+        }
+        versionLock.lock();
+        try {
+            if (hasVersion) {
+                sender.sendMessage(versionMessage);
+                return;
+            }
+            versionWaiters.add(sender);
+            sender.sendMessage("Checking version, please wait...");
+            if (!versionTaskStarted) {
+                versionTaskStarted = true;
+                new Thread(new Runnable() {
+
+                    @Override
+                    public void run() {
+                        obtainVersion();
+                    }
+                }).start();
+            }
+        } finally {
+            versionLock.unlock();
+        }
+    }
+
+    private void obtainVersion() {
+        String version = Bukkit.getVersion();
+        if (version == null) version = "Custom";
+        if (version.startsWith("git-Spigot-")) {
+            String[] parts = version.substring("git-Spigot-".length()).split("-");
+            int cbVersions = getDistance("craftbukkit", parts[1].substring(0, parts[1].indexOf(' ')));
+            int spigotVersions = getDistance("spigot", parts[0]);
+            if (cbVersions == -1 || spigotVersions == -1) {
+                setVersionMessage("Error obtaining version information");
+            } else {
+                if (cbVersions == 0 && spigotVersions == 0) {
+                    setVersionMessage("You are running the latest version");
+                } else {
+                    setVersionMessage("You are " + (cbVersions + spigotVersions) + " version(s) behind");
+                }
+            }
+
+        } else if (version.startsWith("git-Bukkit-")) {
+            version = version.substring("git-Bukkit-".length());
+            int cbVersions = getDistance("craftbukkit", version.substring(0, version.indexOf(' ')));
+            if (cbVersions == -1) {
+                setVersionMessage("Error obtaining version information");
+            } else {
+                if (cbVersions == 0) {
+                    setVersionMessage("You are running the latest version");
+                } else {
+                    setVersionMessage("You are " + cbVersions + " version(s) behind");
+                }
+            }
+        } else {
+            setVersionMessage("Unknown version, custom build?");
+        }
+    }
+
+    private void setVersionMessage(String msg) {
+        lastCheck = System.currentTimeMillis();
+        versionMessage = msg;
+        versionLock.lock();
+        try {
+            hasVersion = true;
+            versionTaskStarted = false;
+            for (CommandSender sender : versionWaiters) {
+                sender.sendMessage(versionMessage);
+            }
+            versionWaiters.clear();
+        } finally {
+            versionLock.unlock();
+        }
+    }
+
+    private static int getDistance(String repo, String hash) {
+        try {
+            BufferedReader reader = Resources.asCharSource(
+                    new URL("https://hub.spigotmc.org/stash/rest/api/1.0/projects/SPIGOT/repos/" + repo + "/commits?since=" + URLEncoder.encode(hash, "UTF-8") + "&withCounts=true"),
+                    Charsets.UTF_8
+            ).openBufferedStream();
+            try {
+                JSONObject obj = (JSONObject) new JSONParser().parse(reader);
+                return ((Number) obj.get("totalCount")).intValue();
+            } catch (ParseException ex) {
+                ex.printStackTrace();
+                return -1;
+            } finally {
+                reader.close();
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+            return -1;
+        }
+    }
+}
\ No newline at end of file
-- 
2.37.3.windows.1

